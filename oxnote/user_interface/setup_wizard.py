#!/usr/bin/python3
# -*- coding: utf-8 -*-

import logging
import os

import qtawesome as qta
from PyQt5.QtCore import QThread, pyqtSlot
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QMainWindow, QMessageBox, QWidget
from PyQt5.uic import loadUi
from urllib3.util import parse_url

from models.accounts import Account, AccountManager
from threads.account_verification import AccountVerificationThreadWorker
from user_interface.main_window import MainWindow
from util.configuration import Configuration
from util.environment import Environment

logger = logging.getLogger(__name__)


class SetupWizard(QMainWindow):

    def __init__(self, *args):
        QWidget.__init__(self, *args)

        loadUi(os.path.join(Environment.get_resource_path(), 'designs/default/setup_wizard.ui'), self)

        self.push_button_start.setEnabled(False)

    '''
    Wizard Events
    '''

    def on_push_button_test_released(self):
        self.line_edit_username.setEnabled(False)
        self.line_edit_password.setEnabled(False)
        self.line_edit_server_address.setEnabled(False)
        self.push_button_test.setEnabled(False)
        self.push_button_test.setText('Testing')
        self.push_button_test.setIcon(qta.icon('fa.spinner', animation=qta.Spin(self.push_button_test)))
        self.push_button_start.setEnabled(False)
        self.push_button_start.setIcon(QIcon())

        self.verify_account_thread = QThread()
        self.verify_account_thread_worker = AccountVerificationThreadWorker(self.line_edit_username.text(),
                                                                            self.line_edit_password.text(),
                                                                            self.line_edit_server_address.text())

        self.verify_account_thread.started.connect(self.verify_account_thread_worker.run)
        self.verify_account_thread_worker.finished.connect(self.account_test_finished)
        self.verify_account_thread_worker.finished.connect(self.verify_account_thread.quit)

        self.verify_account_thread_worker.moveToThread(self.verify_account_thread)
        self.verify_account_thread.start()

    def on_push_button_start_released(self):
        self.push_button_test.setEnabled(False)
        self.push_button_start.setEnabled(False)

        url = parse_url(self.line_edit_server_address.text())

        account = Account()
        account.assign_autogenerated_id()
        account.description = ''
        account.account_root_directory = account.id
        account.oxnote_home_folder = Configuration().get_setting(
                'drive_client', 'api.defaults.oxnote_home_folder.name', default='.oxnote')
        account.application_data_folder = Configuration().get_setting(
                'drive_client', 'api.defaults.application_data_folder.name', default='.oxnote')
        account.url_scheme = url.scheme if url.scheme and url.scheme in ('http', 'https') else 'https'
        account.url_host = url.host if url.host else None
        account.url_port = url.port if url.port else None
        account.url_uri = url.request_uri if url.request_uri and url.request_uri != '/' else '/ajax/'
        account.username = self.line_edit_username.text()
        account.password = self.line_edit_password.text()
        account.context_id = ''
        account.user_id = ''
        account.enabled = True
        account.drive_quota = -1

        AccountManager().save_account_configuration(account)

        self.close()
        self._oxnote_main_window_widget = MainWindow()
        self._oxnote_main_window_widget.show()

    @pyqtSlot(bool, str, name='account_test_finished')
    def account_test_finished(self, account_valid: bool, message: str):
        if account_valid:
            self.line_edit_username.setEnabled(False)
            self.line_edit_password.setEnabled(False)
            self.line_edit_server_address.setEnabled(False)
            self.push_button_test.setEnabled(False)
            self.push_button_test.setText('')
            self.push_button_test.setIcon(qta.icon('fa.check'))
            self.push_button_start.setEnabled(True)
        else:
            self.push_button_start.setEnabled(False)
            self.line_edit_username.setEnabled(True)
            self.line_edit_password.setEnabled(True)
            self.line_edit_server_address.setEnabled(True)
            self.push_button_test.setEnabled(True)
            self.push_button_test.setText('Test')
            self.push_button_test.setIcon(QIcon())
            QMessageBox.warning(None, None, message, QMessageBox.StandardButton(QMessageBox.Ok))
